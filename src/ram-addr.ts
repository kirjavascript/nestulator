/*
 * this list has been generated from TAUS
 *
 * may be different in certain hacks; TetrisGYM does this to a minor extent
 */

export const tmp1: number = 0x0000;
export const tmp2: number = 0x0001;
export const tmp3: number = 0x0002;
export const tmpBulkCopyToPpuReturnAddr: number = 0x0005;
export const patchToPpuAddr: number = 0x0014;
export const rng_seed: number = 0x0017;
export const spawnID: number = 0x0019;
export const spawnCount: number = 0x001a;
export const verticalBlankingInterval: number = 0x0033;
export const unused_0E: number = 0x0034; // Always $0E
export const tetriminoX: number = 0x0040; // Player data is $20 in size. It is copied here from $60 or $80, processed, then copied back
export const tetriminoY: number = 0x0041;
export const currentPiece: number = 0x0042; // Current piece as an orientation ID
export const levelNumber: number = 0x0044;
export const fallTimer: number = 0x0045;
export const autorepeatX: number = 0x0046;
export const startLevel: number = 0x0047;
export const playState: number = 0x0048;
export const vramRow: number = 0x0049; // Next playfield row to copy. Set to $20 when playfield copy is complete
export const completedRow: number = 0x004a; // Row which has been cleared. 0 if none complete
export const autorepeatY: number = 0x004e;
export const holdDownPoints: number = 0x004f;
export const lines: number = 0x0050;
export const rowY: number = 0x0052;
export const score: number = 0x0053;
export const completedLines: number = 0x0056;
export const lineIndex: number = 0x0057; // Iteration count of playState_checkForCompletedRows
export const curtainRow: number = 0x0058;
export const startHeight: number = 0x0059;
export const garbageHole: number = 0x005a; // Position of hole in received garbage
export const player1_tetriminoX: number = 0x0060;
export const player1_tetriminoY: number = 0x0061;
export const player1_currentPiece: number = 0x0062;
export const player1_levelNumber: number = 0x0064;
export const player1_fallTimer: number = 0x0065;
export const player1_autorepeatX: number = 0x0066;
export const player1_startLevel: number = 0x0067;
export const player1_playState: number = 0x0068;
export const player1_vramRow: number = 0x0069;
export const player1_completedRow: number = 0x006a;
export const player1_autorepeatY: number = 0x006e;
export const player1_holdDownPoints: number = 0x006f;
export const player1_lines: number = 0x0070;
export const player1_rowY: number = 0x0072;
export const player1_score: number = 0x0073;
export const player1_completedLines: number = 0x0076;
export const player1_curtainRow: number = 0x0078;
export const player1_startHeight: number = 0x0079;
export const player1_garbageHole: number = 0x007a;
export const player2_tetriminoX: number = 0x0080;
export const player2_tetriminoY: number = 0x0081;
export const player2_currentPiece: number = 0x0082;
export const player2_levelNumber: number = 0x0084;
export const player2_fallTimer: number = 0x0085;
export const player2_autorepeatX: number = 0x0086;
export const player2_startLevel: number = 0x0087;
export const player2_playState: number = 0x0088;
export const player2_vramRow: number = 0x0089;
export const player2_completedRow: number = 0x008a;
export const player2_autorepeatY: number = 0x008e;
export const player2_holdDownPoints: number = 0x008f;
export const player2_lines: number = 0x0090;
export const player2_rowY: number = 0x0092;
export const player2_score: number = 0x0093;
export const player2_completedLines: number = 0x0096;
export const player2_curtainRow: number = 0x0098;
export const player2_startHeight: number = 0x0099;
export const player2_garbageHole: number = 0x009a;
export const spriteXOffset: number = 0x00a0;
export const spriteYOffset: number = 0x00a1;
export const spriteIndexInOamContentLookup: number = 0x00a2;
export const outOfDateRenderFlags: number = 0x00a3; // Bit 0-lines 1-level 2-score 6-stats 7-high score entry letter
export const twoPlayerPieceDelayCounter: number = 0x00a4; // 0 is not delaying
export const twoPlayerPieceDelayPlayer: number = 0x00a5;
export const twoPlayerPieceDelayPiece: number = 0x00a6; // The future value of nextPiece, once the delay completes
export const gameModeState: number = 0x00a7; // For values, see playState_checkForCompletedRows
export const generalCounter: number = 0x00a8; // canon is legalScreenCounter2
export const generalCounter2: number = 0x00a9;
export const generalCounter3: number = 0x00aa;
export const generalCounter4: number = 0x00ab;
export const generalCounter5: number = 0x00ac;
export const selectingLevelOrHeight: number = 0x00ad; // 0-level, 1-height
export const originalY: number = 0x00ae;
export const dropSpeed: number = 0x00af;
export const tmpCurrentPiece: number = 0x00b0; // Only used as a temporary
export const frameCounter: number = 0x00b1;
export const oamStagingLength: number = 0x00b3;
export const newlyPressedButtons: number = 0x00b5; // Active player's buttons
export const heldButtons: number = 0x00b6; // Active player's buttons
export const activePlayer: number = 0x00b7; // Which player is being processed (data in $40)
export const playfieldAddr: number = 0x00b8; // HI byte is leftPlayfield in canon. Current playfield being processed: $0400 (left; 1st player) or $0500 (right; 2nd player)
export const allegro: number = 0x00ba;
export const pendingGarbage: number = 0x00bb; // Garbage waiting to be delivered to the current player. This is exchanged with pendingGarbageInactivePlayer when swapping players.
export const pendingGarbageInactivePlayer: number = 0x00bc; // canon is totalGarbage
export const renderMode: number = 0x00bd;
export const numberOfPlayers: number = 0x00be;
export const nextPiece: number = 0x00bf; // Stored by its orientation ID
export const gameMode: number = 0x00c0; // 0=legal, 1=title, 2=type menu, 3=level menu, 4=play and ending and high score, 5=demo, 6=start demo
export const gameType: number = 0x00c1; // A=0, B=1
export const musicType: number = 0x00c2; // 0-3; 3 is off
export const sleepCounter: number = 0x00c3; // canon is legalScreenCounter1
export const ending: number = 0x00c4;
export const ending_customVars: number = 0x00c5; // Different usages depending on Type A and B and Type B concert
export const ending_currentSprite: number = 0x00cc;
export const ending_typeBCathedralFrameDelayCounter: number = 0x00cd;
export const demo_heldButtons: number = 0x00ce;
export const demo_repeats: number = 0x00cf;
export const demo_recording: number = 0x00d0; // Always 0. FF enables recording
export const demoButtonsAddr: number = 0x00d1; // Current address within demoButtonsTable
export const demoIndex: number = 0x00d3;
export const highScoreEntryNameOffsetForLetter: number = 0x00d4; // Relative to current row
export const highScoreEntryRawPos: number = 0x00d5; // High score position 0=1st type A, 1=2nd... 4=1st type B... 7=4th/extra type B
export const highScoreEntryNameOffsetForRow: number = 0x00d6; // Relative to start of table
export const highScoreEntryCurrentLetter: number = 0x00d7;
export const lineClearStatsByType: number = 0x00d8; // bcd. one entry for each of single, double, triple, tetris
export const totalScore: number = 0x00dc;
export const displayNextPiece: number = 0x00df;
export const AUDIOTMP1: number = 0x00e0;
export const AUDIOTMP2: number = 0x00e1;
export const AUDIOTMP3: number = 0x00e2;
export const AUDIOTMP4: number = 0x00e3;
export const AUDIOTMP5: number = 0x00e4;
export const musicChanTmpAddr: number = 0x00e6;
export const music_unused2: number = 0x00ea; // Always 0
export const soundRngSeed: number = 0x00eb; // Set, but not read
export const currentSoundEffectSlot: number = 0x00ed; // Temporary
export const musicChannelOffset: number = 0x00ee; // Temporary. Added to $4000-3 for MMIO
export const currentAudioSlot: number = 0x00ef; // Temporary
export const unreferenced_buttonMirror: number = 0x00f1; // Mirror of $F5-F8
export const newlyPressedButtons_player1: number = 0x00f5; // $80-a $40-b $20-select $10-start $08-up $04-down $02-left $01-right
export const newlyPressedButtons_player2: number = 0x00f6;
export const heldButtons_player1: number = 0x00f7;
export const heldButtons_player2: number = 0x00f8;
export const joy1Location: number = 0x00fb; // normal=0; 1 or 3 for expansion
export const ppuScrollY: number = 0x00fc; // Set to 0 many places, but not read
export const ppuScrollX: number = 0x00fd; // Set to 0 many places, but not read
export const currentPpuMask: number = 0x00fe;
export const currentPpuCtrl: number = 0x00ff;
export const stack: number = 0x0100;
export const oamStaging: number = 0x0200; // format: https://wiki.nesdev.com/w/index.php/PPU_programmer_reference#OAM
export const statsByType: number = 0x03f0;
export const playfield: number = 0x0400;
export const playfieldForSecondPlayer: number = 0x0500;
export const musicStagingSq1Lo: number = 0x0680;
export const musicStagingSq1Hi: number = 0x0681;
export const audioInitialized: number = 0x0682;
export const musicPauseSoundEffectLengthCounter: number = 0x0683;
export const musicStagingSq2Lo: number = 0x0684;
export const musicStagingSq2Hi: number = 0x0685;
export const musicStagingTriLo: number = 0x0688;
export const musicStagingTriHi: number = 0x0689;
export const resetSq12ForMusic: number = 0x068a; // 0-off. 1-sq1. 2-sq1 and sq2
export const musicPauseSoundEffectCounter: number = 0x068b; // Even/odd for sound effect alternating
export const music_unused: number = 0x068c; // Always 0
export const musicPauseScreen: number = 0x068d; // $05 if in pause screen
export const musicDataNoteTableOffset: number = 0x0690; // AKA start of musicData, of size $0A
export const musicDataDurationTableOffset: number = 0x0691;
export const musicDataChanPtr: number = 0x0692;
export const musicChanControl: number = 0x069a; // high 3 bits are for LO offset behavior. Low 5 bits index into musicChanVolControlTable, minus 1. Technically size 4, but usages of the next variable 'cheat' since that variable's first index is unused
export const musicChanVolume: number = 0x069d; // Must not use first index. First and second index are unused. High nibble always used; low nibble may be used depending on control and frame
export const musicDataChanPtrDeref: number = 0x06a0; // deref'd musicDataChanPtr+musicDataChanPtrOff
export const musicDataChanPtrOff: number = 0x06a8;
export const musicDataChanInstructionOffset: number = 0x06ac;
export const musicDataChanInstructionOffsetBackup: number = 0x06b0;
export const musicChanNoteDurationRemaining: number = 0x06b4;
export const musicChanNoteDuration: number = 0x06b8;
export const musicChanProgLoopCounter: number = 0x06bc; // As driven by bytecode instructions
export const musicStagingSq1Sweep: number = 0x06c0; // Used as if size 4, but since Tri/Noise does nothing when written for sweep, the other two entries can have any value without changing behavior
export const musicChanNote: number = 0x06c3;
export const musicChanInhibitSetter: number = 0x06c7;
export const musicChanInhibit: number = 0x06c8; // If x denotes channel, then channel inhibited when this value contains x+1. Disabled via musicChanInhibitSetter
export const musicTrack_dec: number = 0x06cc; // $00-$09
export const musicChanVolFrameCounter: number = 0x06cd; // Pos 0/1 are unused
export const musicChanLoFrameCounter: number = 0x06d1; // Pos 3 unused
export const soundEffectSlot0FrameCount: number = 0x06d5; // Number of frames
export const soundEffectSlot0FrameCounter: number = 0x06da; // Current frame
export const soundEffectSlot0SecondaryCounter: number = 0x06df; // nibble index into noiselo_/noisevol_table
export const soundEffectSlot1SecondaryCounter: number = 0x06e0;
export const soundEffectSlot2SecondaryCounter: number = 0x06e1;
export const soundEffectSlot3SecondaryCounter: number = 0x06e2;
export const soundEffectSlot0TertiaryCounter: number = 0x06e3;
export const soundEffectSlot1TertiaryCounter: number = 0x06e4;
export const soundEffectSlot2TertiaryCounter: number = 0x06e5;
export const soundEffectSlot3TertiaryCounter: number = 0x06e6;
export const soundEffectSlot0Tmp: number = 0x06e7;
export const soundEffectSlot1Tmp: number = 0x06e8;
export const soundEffectSlot2Tmp: number = 0x06e9;
export const soundEffectSlot3Tmp: number = 0x06ea;
export const soundEffectSlot0Init: number = 0x06f0; // NOISE sound effect. 2-game over curtain. 3-ending rocket. For mapping, see soundEffectSlot0Init_table
export const soundEffectSlot1Init: number = 0x06f1; // SQ1 sound effect. Menu, move, rotate, clear sound effects. For mapping, see soundEffectSlot1Init_table
export const soundEffectSlot2Init: number = 0x06f2; // SQ2 sound effect. For mapping, see soundEffectSlot2Init_table
export const soundEffectSlot3Init: number = 0x06f3; // TRI sound effect. For mapping, see soundEffectSlot3Init_table
export const soundEffectSlot4Init: number = 0x06f4; // Unused. Assume meant for DMC sound effect. Uses some data from slot 2
export const musicTrack: number = 0x06f5; // $FF turns off music. $00 continues selection. $01-$0A for new selection
export const musicDmcGapless: number = 0x06f7; // When non-zero, change sample without clearing buffered sample. Always 0
export const soundEffectSlot0Playing: number = 0x06f8; // Used if init is zero
export const soundEffectSlot1Playing: number = 0x06f9;
export const soundEffectSlot2Playing: number = 0x06fa;
export const soundEffectSlot3Playing: number = 0x06fb;
export const soundEffectSlot4Playing: number = 0x06fc;
export const currentlyPlayingMusicTrack: number = 0x06fd; // Copied from musicTrack
export const unreferenced_soundRngTmp: number = 0x06ff;
export const highScoreNames: number = 0x0700;
export const highScoreScoresA: number = 0x0730;
export const highScoreScoresB: number = 0x073c;
export const highScoreLevels: number = 0x0748;
export const initMagic: number = 0x0750; // Initialized to a hard-coded number. When resetting, if not correct number then it knows this is a cold boot
export const PPUCTRL: number = 0x2000;
export const PPUMASK: number = 0x2001;
export const PPUSTATUS: number = 0x2002;
export const OAMADDR: number = 0x2003;
export const OAMDATA: number = 0x2004;
export const PPUSCROLL: number = 0x2005;
export const PPUADDR: number = 0x2006;
export const PPUDATA: number = 0x2007;
export const SQ1_VOL: number = 0x4000;
export const SQ1_SWEEP: number = 0x4001;
export const SQ1_LO: number = 0x4002;
export const SQ1_HI: number = 0x4003;
export const SQ2_VOL: number = 0x4004;
export const SQ2_SWEEP: number = 0x4005;
export const SQ2_LO: number = 0x4006;
export const SQ2_HI: number = 0x4007;
export const TRI_LINEAR: number = 0x4008;
export const TRI_LO: number = 0x400a;
export const TRI_HI: number = 0x400b;
export const NOISE_VOL: number = 0x400c;
export const NOISE_LO: number = 0x400e;
export const NOISE_HI: number = 0x400f;
export const DMC_FREQ: number = 0x4010;
export const DMC_RAW: number = 0x4011;
export const DMC_START: number = 0x4012; // start << 6 + $C000
export const DMC_LEN: number = 0x4013; // len << 4 + 1
export const OAMDMA: number = 0x4014;
export const SND_CHN: number = 0x4015;
export const JOY1: number = 0x4016;
export const JOY2_APUFC: number = 0x4017; // read: bits 0-4 joy data lines (bit 0 being normal controller), bits 6-7 are FC inhibit and mode
export const MMC1_Control: number = 0x8000;
